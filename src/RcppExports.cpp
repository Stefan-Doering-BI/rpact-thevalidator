// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getRandomSurvivalDistribution
double getRandomSurvivalDistribution(double rate, double kappa);
RcppExport SEXP _rpact_getRandomSurvivalDistribution(SEXP rateSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(getRandomSurvivalDistribution(rate, kappa));
    return rcpp_result_gen;
END_RCPP
}
// getRandomPiecewiseExponentialDistribution
double getRandomPiecewiseExponentialDistribution(NumericVector cdfValues, NumericVector piecewiseLambda, NumericVector piecewiseSurvivalTime);
RcppExport SEXP _rpact_getRandomPiecewiseExponentialDistribution(SEXP cdfValuesSEXP, SEXP piecewiseLambdaSEXP, SEXP piecewiseSurvivalTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type cdfValues(cdfValuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type piecewiseLambda(piecewiseLambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(getRandomPiecewiseExponentialDistribution(cdfValues, piecewiseLambda, piecewiseSurvivalTime));
    return rcpp_result_gen;
END_RCPP
}
// getSimulationSurvivalCpp
List getSimulationSurvivalCpp(int designNumber, int kMax, int sided, NumericVector criticalValues, NumericVector informationRates, double conditionalPower, NumericVector plannedEvents, double thetaH1, NumericVector minNumberOfEventsPerStage, NumericVector maxNumberOfEventsPerStage, bool directionUpper, double allocation1, double allocation2, NumericVector accrualTime, IntegerVector treatmentGroup, double thetaH0, NumericVector futilityBounds, NumericVector alpha0Vec, NumericVector pi1Vec, double pi2, double eventTime, NumericVector piecewiseSurvivalTime, NumericVector cdfValues1, NumericVector cdfValues2, NumericVector lambdaVec1, NumericVector lambdaVec2, NumericVector phi, int maxNumberOfSubjects, int maxNumberOfIterations, int maxNumberOfRawDatasetsPerStage, double kappa);
RcppExport SEXP _rpact_getSimulationSurvivalCpp(SEXP designNumberSEXP, SEXP kMaxSEXP, SEXP sidedSEXP, SEXP criticalValuesSEXP, SEXP informationRatesSEXP, SEXP conditionalPowerSEXP, SEXP plannedEventsSEXP, SEXP thetaH1SEXP, SEXP minNumberOfEventsPerStageSEXP, SEXP maxNumberOfEventsPerStageSEXP, SEXP directionUpperSEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP accrualTimeSEXP, SEXP treatmentGroupSEXP, SEXP thetaH0SEXP, SEXP futilityBoundsSEXP, SEXP alpha0VecSEXP, SEXP pi1VecSEXP, SEXP pi2SEXP, SEXP eventTimeSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP cdfValues1SEXP, SEXP cdfValues2SEXP, SEXP lambdaVec1SEXP, SEXP lambdaVec2SEXP, SEXP phiSEXP, SEXP maxNumberOfSubjectsSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsPerStageSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type designNumber(designNumberSEXP);
    Rcpp::traits::input_parameter< int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< int >::type sided(sidedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< double >::type conditionalPower(conditionalPowerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type plannedEvents(plannedEventsSEXP);
    Rcpp::traits::input_parameter< double >::type thetaH1(thetaH1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type minNumberOfEventsPerStage(minNumberOfEventsPerStageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxNumberOfEventsPerStage(maxNumberOfEventsPerStageSEXP);
    Rcpp::traits::input_parameter< bool >::type directionUpper(directionUpperSEXP);
    Rcpp::traits::input_parameter< double >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< double >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type treatmentGroup(treatmentGroupSEXP);
    Rcpp::traits::input_parameter< double >::type thetaH0(thetaH0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha0Vec(alpha0VecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi1Vec(pi1VecSEXP);
    Rcpp::traits::input_parameter< double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< double >::type eventTime(eventTimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdfValues1(cdfValues1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cdfValues2(cdfValues2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdaVec1(lambdaVec1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdaVec2(lambdaVec2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type maxNumberOfSubjects(maxNumberOfSubjectsSEXP);
    Rcpp::traits::input_parameter< int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< int >::type maxNumberOfRawDatasetsPerStage(maxNumberOfRawDatasetsPerStageSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(getSimulationSurvivalCpp(designNumber, kMax, sided, criticalValues, informationRates, conditionalPower, plannedEvents, thetaH1, minNumberOfEventsPerStage, maxNumberOfEventsPerStage, directionUpper, allocation1, allocation2, accrualTime, treatmentGroup, thetaH0, futilityBounds, alpha0Vec, pi1Vec, pi2, eventTime, piecewiseSurvivalTime, cdfValues1, cdfValues2, lambdaVec1, lambdaVec2, phi, maxNumberOfSubjects, maxNumberOfIterations, maxNumberOfRawDatasetsPerStage, kappa));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP R_getDensityValues(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_rpact_getRandomSurvivalDistribution", (DL_FUNC) &_rpact_getRandomSurvivalDistribution, 2},
    {"_rpact_getRandomPiecewiseExponentialDistribution", (DL_FUNC) &_rpact_getRandomPiecewiseExponentialDistribution, 3},
    {"_rpact_getSimulationSurvivalCpp", (DL_FUNC) &_rpact_getSimulationSurvivalCpp, 31},
    {"R_getDensityValues", (DL_FUNC) &R_getDensityValues, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_rpact(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
